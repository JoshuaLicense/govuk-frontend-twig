{% macro govukCharacterCount(params) %}
{% from "@govuk-frontend-twig/macros/i18n.twig" import govukI18nAttributes %}
{% from "@govuk-frontend-twig/macros/attributes.twig" import govukAttributes %}
{% from "@govuk-frontend-twig/components/textarea.html.twig" import govukTextarea %}
{% from "@govuk-frontend-twig/components/hint.html.twig" import govukHint %}

{%- set hasNoLimit = not (params.maxwords | default(false) or params.maxlength | default(false)) -%}
{%- set textareaDescriptionLength = params.maxwords | default(params.maxlength | default()) ~%}
{%- set textareaUnit = params.maxwords | default(false) ? 'words' : 'characters' ~%}
{%- set textareaDescriptionText = params.textareaDescriptionText | default("You can enter up to %{count} #{textareaUnit}") ~%}
{%- set id = params.id | default(params.name) ~%}

{%- set countMessageHtml %}
  {%- set countMessageClassNames = 'govuk-character-count__message' %}
  {%- if params.countMessage.classes | default(false) %}
    {%- set countMessageClassNames = "#{countMessageClassNames} #{params.countMessage.classes}" %}
  {%- endif %}

  {{- govukHint({
    text: hasNoLimit ? null : textareaDescriptionText | replace({'%{count}': textareaDescriptionLength}),
    id: "#{id}-info",
    classes: countMessageClassNames
  }) | trim | raw }}
{%- endset -%}

{%- set attributesHtml %}
  {{- govukAttributes({
    "data-module": "govuk-character-count",
    "data-maxlength": {
      value: params.maxlength | default(null),
      optional: true
    },
    "data-threshold": {
      value: params.threshold | default(null),
      optional: true
    },
    "data-maxwords": {
      value: params.maxwords | default(null),
      optional: true
    }
  }) -}}
  {#-
    Without maxlength or maxwords, we can't guess if the component will count words or characters.
    We can't guess a default textarea description to be interpolated in JavaScript
    once the maximum gets configured there.
    So we only add the attribute if a textarea description was explicitely provided.
  #}
  {%- if hasNoLimit and params.textareaDescriptionText is defined ~%}
    {{- govukI18nAttributes({
      key: 'textarea-description',
      messages: { other: params.textareaDescriptionText }
    }) -}}
  {%- endif -%}

  {{- govukI18nAttributes({
    key: 'characters-under-limit',
    messages: params.charactersUnderLimitText | default(null)
  }) -}}

  {{- govukI18nAttributes({
    key: 'characters-at-limit',
    message: params.charactersAtLimitText | default(null)
  }) -}}

  {{- govukI18nAttributes({
    key: 'characters-over-limit',
    messages: params.charactersOverLimitText | default(null)
  }) -}}

  {{- govukI18nAttributes({
    key: 'words-under-limit',
    messages: params.wordsUnderLimitText | default(null)
  }) -}}

  {{- govukI18nAttributes({
    key: 'words-at-limit',
    message: params.wordsAtLimitText | default(null)
  }) -}}

  {{- govukI18nAttributes({
    key: 'words-over-limit',
    messages: params.wordsOverLimitText | default(null)
  }) -}}
{% endset -%}

{#- Append form group attributes onto attributes set above #}
{%- for name, value in params.formGroup.attributes ?? [] %}
  {%- set attributesHtml = "#{attributesHtml} #{name}=\"#{value}\"" %}
{%- endfor -%}

{{ govukTextarea({
  id: id,
  name: params.name,
  describedBy: "#{id}-info",
  rows: params.rows | default(null),
  spellcheck: params.spellcheck is defined ? params.spellcheck : null,
  value: params.value | default(null),
  formGroup: {
    classes: "govuk-character-count" ~ (params.formGroup.classes | default(false) ? ' ' ~ params.formGroup.classes : ''),
    attributes: attributesHtml,
    beforeInput: params.formGroup.beforeInput | default(null),
    afterInput: {
      html: countMessageHtml
    }
  },
  classes: 'govuk-js-character-count' ~ (params.classes | default(false) ? ' ' ~ params.classes : ''),
  label: {
    html: params.label.html | default(null),
    text: params.label.text | default(null),
    classes: params.label.classes | default(null),
    isPageHeading: params.label.isPageHeading | default(false),
    attributes: params.label.attributes | default(null),
    for: id | default(null)
  },
  hint: params.hint | default(null),
  errorMessage: params.errorMessage | default(null),
  attributes: params.attributes | default(null)
}) | trim | raw }}
{% endmacro %}
