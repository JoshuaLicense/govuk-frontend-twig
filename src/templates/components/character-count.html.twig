{% macro govukCharacterCount(params) %}
{% from "@govuk-frontend-twig/macros/i18n.twig" import govukI18nAttributes %}
{% from "@govuk-frontend-twig/components/textarea.html.twig" import govukTextarea %}
{% from "@govuk-frontend-twig/components/hint.html.twig" import govukHint %}

{%- set hasNoLimit = not (params.maxwords | default(false) or params.maxlength | default(false)) -%}

<div class="govuk-character-count" data-module="govuk-character-count"
  {%- if params.maxlength | default(false) %} data-maxlength="{{ params.maxlength }}"{% endif %}
  {%- if params.threshold | default(false) %} data-threshold="{{ params.threshold }}"{% endif %}
  {%- if params.maxwords | default(false) %} data-maxwords="{{ params.maxwords }}"{% endif %}
  {#-
    Without maxlength or maxwords, we can't guess if the component will count words or characters.
    We can't guess a default textarea description to be interpolated in JavaScript
    once the maximum gets configured there.
    So we only add the attribute if a textarea description was explicitely provided.
  #}
  {%- if hasNoLimit and params.textareaDescriptionText is defined %}
    {{- govukI18nAttributes({
      key: 'textarea-description',
      messages: { other: params.textareaDescriptionText}
    }) -}}
  {% endif -%}

  {{- govukI18nAttributes({
    key: 'characters-under-limit',
    messages: params.charactersUnderLimitText | default(null)
  }) -}}

  {{- govukI18nAttributes({
    key: 'characters-at-limit',
    message: params.charactersAtLimitText | default(null)
  }) -}}

  {{- govukI18nAttributes({
    key: 'characters-over-limit',
    messages: params.charactersOverLimitText | default(null)
  }) -}}

  {{- govukI18nAttributes({
    key: 'words-under-limit',
    messages: params.wordsUnderLimitText | default(null)
  }) -}}

  {{- govukI18nAttributes({
    key: 'words-at-limit',
    message: params.wordsAtLimitText | default(null)
  }) -}}

  {{- govukI18nAttributes({
    key: 'words-over-limit',
    messages: params.wordsOverLimitText | default(null)
  }) -}}>
  {{ govukTextarea({
    id: params.id,
    name: params.name,
    describedBy: "#{params.id}-info",
    rows: params.rows | default(null),
    spellcheck: params.spellcheck is defined ? params.spellcheck : null,
    value: params.value | default(null),
    formGroup: params.formGroup | default(null),
    classes: 'govuk-js-character-count' ~ (params.classes | default(false) ? ' ' ~ params.classes : ''),
    label: {
      html: params.label.html | default(null),
      text: params.label.text | default(null),
      classes: params.label.classes | default(null),
      isPageHeading: params.label.isPageHeading | default(false),
      attributes: params.label.attributes | default(null),
      for: params.id | default(null)
    },
    hint: params.hint | default(null),
    errorMessage: params.errorMessage | default(null),
    attributes: params.attributes | default(null)
  }) }}

  {%- set textareaDescriptionLength = params.maxwords | default(params.maxlength | default()) %}
  {%- set textareaUnit = params.maxwords | default(false) ? 'words' : 'characters' %}
  {%- set textareaDescriptionText = params.textareaDescriptionText | default("You can enter up to %{count} #{textareaUnit}") %}
  {#-
    If the limit is set in JavaScript, we won't be able to interpolate the message
    until JavaScript, so we only set a text if the `maxlength` or `maxwords` options
    were provided to the macro.
  #}
  {%- set countMessageClassNames = 'govuk-character-count__message' %}
  {%- if params.countMessage.classes | default(false) %}
    {%- set countMessageClassNames = "#{countMessageClassNames} #{params.countMessage.classes}" %}
  {%- endif %}

  {{ govukHint({
    text: hasNoLimit ? null : textareaDescriptionText | replace({'%{count}': textareaDescriptionLength}),
    id: "#{params.id}-info",
    classes: countMessageClassNames
  }) | trim | raw }}
</div>
{% endmacro %}
